{"version":3,"sources":["components/Navbar.tsx","pages/ContactsPage.tsx","pages/AboutPage.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodoPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","to","ContactsPage","AboutPage","history","useHistory","onClick","push","TodoForm","props","ref","useRef","placeholder","id","type","onKeyPress","event","key","console","log","current","value","onAdd","htmlFor","TodoList","todos","changeHandler","removeHandler","map","todo","classes","completed","join","checked","onChange","bind","title","TodoPage","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","Fragment","newTodo","Date","now","prev","confirm","filter","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a084b0bb.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Navbar: React.FunctionComponent = () => (\n  <nav>\n    <div className=\"nav-wrapper purple darken-4 px-1\">\n      <a href=\"/\" className=\"brand-logo\">\n        Logo\n      </a>\n      <ul className=\"right hide-on-med-and-down\">\n        <li>\n          <NavLink to=\"/\">Todos</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/about\">About</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/contacts\">Contacts</NavLink>\n        </li>\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\n\nexport const ContactsPage: React.FC = () => {\n  return (\n    <div>\n      <h1>Contacts page</h1>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const AboutPage: React.FC = () => {\n  const history = useHistory();\n  return (\n    <>\n      <h1>About page</h1>\n      <p>\n        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Vel beatae\n        eaque labore. Unde at nam eveniet vel voluptatum? Laudantium, molestiae?\n        Accusamus atque fugiat explicabo laborum assumenda in voluptates soluta\n        perferendis.\n      </p>\n      <button className=\"btn\" onClick={() => history.push(\"/\")}>\n        Go to home\n      </button>\n    </>\n  );\n};\n","import React, {\n  // useState\n  useRef,\n} from \"react\";\n\ninterface TodoFormProps {\n  onAdd(todo: string): void;\n}\n\nexport const TodoForm: React.FC<TodoFormProps> = (props) => {\n  // export const TodoForm: React.FC<{ onAdd(todo: string): void }> = (props) => {\n  //   const [val, setVal] = useState<string>(\"\");\n  const ref = useRef<HTMLInputElement>(null);\n\n  //   const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //     setVal(event.target.value);\n  //   };\n\n  const keyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      console.log(\"-----\", ref.current?.value);\n      props.onAdd(ref.current!.value);\n      ref.current!.value = \"\";\n      //   setVal(\"\");\n    }\n  };\n\n  return (\n    <div className=\"input-field col s6\">\n      <input\n        placeholder=\"Placeholder\"\n        id=\"first_name\"\n        type=\"text\"\n        className=\"validate\"\n        // value={val}\n        // onChange={changeHandler}\n        ref={ref}\n        onKeyPress={keyPressHandler}\n      />\n      <label htmlFor=\"first_name\" className=\"active\">\n        Enter your todo\n      </label>\n\n      {/* <p>!!! --- {val}</p> */}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ITodo } from \"../interfaces\";\n\ntype TodoListProps = {\n  todos: ITodo[];\n  changeHandler(id: number): void;\n  removeHandler: (id: number) => void;\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos,\n  changeHandler,\n  removeHandler,\n}) => {\n  return (\n    <ul>\n      {todos.map((todo) => {\n        const classes = [\"todo\"];\n        if (todo.completed) {\n          classes.push(\"completed\");\n        }\n        return (\n          <li className={classes.join(\" \")} key={todo.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={changeHandler.bind(null, todo.id)}\n              />\n              <span>{todo.title}</span>\n              <i\n                className=\"material-icons red-text\"\n                onClick={() => removeHandler(todo.id)}\n              >\n                delete\n              </i>\n            </label>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport { TodoForm } from \"../components/TodoForm\";\nimport { TodoList } from \"../components/TodoList\";\n\nimport { ITodo } from \"../interfaces\";\n\ndeclare var confirm: (question: string) => boolean;\n\nexport const TodoPage: React.FC = () => {\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem(\"todos\") || \"[]\") as ITodo[];\n    setTodos(saved);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  const addHandler = (todo: string) => {\n    const newTodo: ITodo = {\n      title: todo,\n      id: Date.now(),\n      completed: false,\n    };\n    setTodos((prev) => {\n      return [...prev, newTodo];\n    });\n  };\n\n  const changeCompleted = (id: number) => {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    );\n  };\n\n  const removeTodo = (id: number) => {\n    const conf = confirm(\"Are you sure you want to remove element?\");\n    // const conf = window.confirm(\"Are you sure you want to remove element?\");\n    if (conf) {\n      setTodos((prev) => prev.filter((todo) => todo.id !== id));\n    }\n  };\n  return (\n    <React.Fragment>\n      <TodoForm onAdd={addHandler} />\n\n      <TodoList\n        todos={todos}\n        changeHandler={changeCompleted}\n        removeHandler={removeTodo}\n      />\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport Navbar from \"./components/Navbar\";\nimport { ContactsPage } from \"./pages/ContactsPage\";\nimport { AboutPage } from \"./pages/AboutPage\";\nimport { TodoPage } from \"./pages/TodoPage\";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <div className=\"container\">\n        <Switch>\n          <Route component={TodoPage} path=\"/\" exact />\n          <Route component={AboutPage} path=\"/about\" />\n          <Route component={ContactsPage} path=\"/contacts\" />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}